<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title></title>
        <link>undefined</link>
        <description>undefined</description>
        <lastBuildDate>Tue, 23 Jan 2024 01:39:27 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>Joplin Pages Publisher</generator>
        <item>
            <title><![CDATA[Git Cheatsheet]]></title>
            <guid>12221e8b8e81433ea18371199a1dc636</guid>
            <pubDate>Tue, 23 Jan 2024 01:36:39 GMT</pubDate>
            <content:encoded><![CDATA[<p>Original Date: 06/13/2020</p>
<hr />
<p>layout: page<br />
title: Git Cheatsheet<br />
categories: [tech]<br />
tags: [git, tech, cheatsheet]<br />
comments: true</p>
<hr />
<h3 id="squash-commits">squash commits</h3>
<ol>
<li>Choose the exact number of commits that you want to squash<br />
<code>git rebase -i HEAD~4</code></li>
<li>In the menu that shows up, supply 'r' (reword) command for the top line (also note that in git the lines are listed in reverse chronological order</li>
<li>For all other lines, supply 's' (squash) command, and save (:x) the menu</li>
<li>The next menu would allow you to reword the top line commit, and the subsequent one would squash the remaining commits</li>
<li>force push the squashed commits (<code>git push --force</code>)</li>
</ol>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Configuring Multiple SSH Accounts in GitHub]]></title>
            <guid>1ecb647152434114b1dde7bfe6c89d73</guid>
            <pubDate>Tue, 23 Jan 2024 01:35:36 GMT</pubDate>
            <content:encoded><![CDATA[<p>Original Date: 07/02/2020</p>
<hr />
<p>layout: page<br />
categories: [tech]<br />
title: Configuring Multiple SSH Accounts in GitHub<br />
tags: [git, tech]</p>
<hr />
<p>GitHub doesn't allow to use the same ssh key with multiple accounts. If you have two keys, then you need to configure your ssh config so that it automatically chooses the right key based on the url</p>
<ol>
<li>
<p>Generate keys</p>
<ol>
<li>ssh-keygen -t rsa_2 -b 4096 -C "some.email@gmail.com"
<ol>
<li>enter passphrase or leave blank</li>
<li>enter a filename so that it doesn’t overwrite the default file</li>
</ol>
</li>
</ol>
</li>
<li>
<p>Add keys to ssh-agent</p>
<ol>
<li>ssh-add ~/.ssh/id_rsa</li>
<li>ssh-add ~/.ssh/id_rsa_2</li>
<li>Verify by running: ssh-add -l</li>
</ol>
</li>
<li>
<p>configure your ssh config file</p>
<div><pre class="hljs"><code><span class="hljs-attribute">Host</span> anything.github.com
   HostName github.com
   PreferredAuthentications publickey
   AddKeysToAgent <span class="hljs-literal">yes</span>
   UseKeychain <span class="hljs-literal">yes</span>
   IdentityFile ~/.ssh/id_rsa_2
   IdentitiesOnly <span class="hljs-literal">yes</span>

<span class="hljs-comment"># * is default and applies to everything</span>
<span class="hljs-comment"># so putting an exception for the above profile</span>
Host * !anything.github.com
   AddKeysToAgent <span class="hljs-literal">yes</span>
   UseKeychain <span class="hljs-literal">yes</span>
   IdentityFile ~/.ssh/id_rsa</code></pre></div>
</li>
<li>
<p>Verify your setup</p>
<div><pre class="hljs"><code>| =&gt; ssh -T git@anything.github.com 
Hi anything! You've successfully authenticated, but GitHub does not provide shell access.
<span class="hljs-bullet">3.</span> <span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span>
| =&gt; ssh -T git@github.com 
Hi yourname! You've successfully authenticated, but GitHub does not provide shell access.</code></pre></div>
</li>
<li>
<p>Clone a repo</p>
<ol>
<li>you will need to use ssh (not https)</li>
<li>Replace github.com with anything.github.com
<ol>
<li>Ex: if shown in GitHub git@github.com:barryclark/jekyll-now.git, use
<ol>
<li>git clone git@anything.github.com:barryclark/jekyll-now.git
<ol>
<li>you can verify this by running
<ol>
<li>git remote show origin
<ol>
<li>Fetch URL: git@anything.github.com:barryclark/jekyll-now.git</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Terraform Provider Mirror Setup on GCS]]></title>
            <guid>2a3c4cc4902842b091b40daf0b001fac</guid>
            <pubDate>Tue, 23 Jan 2024 01:32:16 GMT</pubDate>
            <content:encoded><![CDATA[<p>Original Date: 02/03/2022</p>
<hr />
<p>layout: page<br />
title: Terraform Provider Mirror Setup on GCS<br />
categories:</p>
<ul>
<li>tech</li>
<li>cloud<br />
tags:</li>
<li>terraform</li>
<li>tech</li>
<li>cloud<br />
comments: true<br />
published: true</li>
</ul>
<hr />
<p>This article covers the basic steps for creating a terraform provider mirror in a Google GCS bucket. For those of you who are not familiar with terraform providers can read more about it <a title="https://www.terraform.io/registry/providers" href="https://www.terraform.io/registry/providers">here</a> at <a title="https://www.terraform.io/" href="https://www.terraform.io/">www.terraform.io</a>.</p>
<ol>
<li>Setup an example tf file with just the providers. See <a title="https://www.terraform.io/language/providers/configuration" href="https://www.terraform.io/language/providers/configuration">Provider Configuration</a><div><pre class="hljs"><code>| cat main.tf 
provider <span class="hljs-string">"google"</span> {
  <span class="hljs-attr">project</span> = <span class="hljs-string">"acme-app"</span>
  <span class="hljs-attr">region</span>  = <span class="hljs-string">"us-central1"</span>
}</code></pre></div>
</li>
<li>Test providers download
<ul>
<li>Try below to download provider from internet<div><pre class="hljs"><code>terraform <span class="hljs-keyword">init</span></code></pre></div>
</li>
<li>Verify<div><pre class="hljs"><code>| terraform providers

Providers required by configuration:
.
└── provider[registry.terraform.io<span class="hljs-regexp">/hashicorp/g</span>oogle]   </code></pre></div>
</li>
</ul>
</li>
<li>Now create a local mirror. The command below will copy all providers for the above module to this local directory mirror. See <a title="https://www.terraform.io/cli/commands/providers/mirror" href="https://www.terraform.io/cli/commands/providers/mirror">command reference</a><div><pre class="hljs"><code> | mkdir mirror
 | terraform providers mirror mirror/
 - Mirroring hashicorp/google...
   - Selected v4.<span class="hljs-number">9.0</span> <span class="hljs-keyword">with</span> no constraints
   - Downloading <span class="hljs-keyword">package</span> <span class="hljs-title">for darwin_amd64...</span>
   - <span class="hljs-keyword">Package</span> <span class="hljs-title">authenticated: signed by HashiCorp   </span></code></pre></div>
</li>
<li>Try the local mirror
<ul>
<li>setup<div><pre class="hljs"><code><span class="hljs-comment"># remove the lock file</span>
rm .terraform.lock.hcl 

<span class="hljs-comment"># setup enhanced logging</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">TF_LOG</span>=TRACE</code></pre></div>
</li>
<li>setup local configuration to use the above local mirror<div><pre class="hljs"><code><span class="hljs-built_in">export</span> <span class="hljs-attribute">TF_CLI_CONFIG_FILE</span>=<span class="hljs-string">"<span class="hljs-variable">$(pwd)</span>/.terraformrctemp"</span>
cat &lt;&lt;EOF &gt; <span class="hljs-variable">$TF_CLI_CONFIG_FILE</span>
provider_installation {
  filesystem_mirror {
    path    = <span class="hljs-string">"/Users/admin/Documents/docs/docs_misc/technical/code/github/terraform-tutorial/mirror/"</span>
    include = [<span class="hljs-string">"hashicorp/google"</span>]
  }
}
EOF     </code></pre></div>
</li>
<li>try the local mirror now<div><pre class="hljs"><code>terraform <span class="hljs-keyword">init</span></code></pre></div>
</li>
</ul>
</li>
<li>Setup remote mirror in GCS
<ul>
<li>create a <strong>public</strong> bucket</li>
<li>copy the local mirror to the GCP bucket (assumes gcloud cli has been setup correctly with region/project/etc)<div><pre class="hljs"><code>gsutil cp -r ..<span class="hljs-regexp">/terraform-tutorial/mi</span>rror<span class="hljs-regexp">/ gs:/</span><span class="hljs-regexp">/terraform-registry</span></code></pre></div>
note: this will copy the mirror dir to the bucket (and it will be on the path)</li>
<li>Test that access works<div><pre class="hljs"><code>| curl https:<span class="hljs-regexp">//</span>storage.googleapis.com<span class="hljs-regexp">/terraform-registry/mi</span>rror<span class="hljs-regexp">/registry.terraform.io/</span>hashicorp<span class="hljs-regexp">/google/i</span>ndex.json
{
  <span class="hljs-string">"versions"</span>: {
    <span class="hljs-string">"4.9.0"</span>: {}
  }
}</code></pre></div>
</li>
</ul>
</li>
<li>Try the remote mirror
<ul>
<li>
<p>Update the CFG file to use the remote bucket mirror</p>
<div><pre class="hljs"><code>  | cat .terraformrctemp 
  <span class="hljs-title class_">provider_installation</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-title class_">network_mirror</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">url</span>    <span class="hljs-operator">=</span> <span class="hljs-string">"https://storage.googleapis.com/terraform-registry/mirror/"</span>
      <span class="hljs-attr">include</span> <span class="hljs-operator">=</span> [<span class="hljs-string">"hashicorp/google"</span>]
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">}</span></code></pre></div>
</li>
<li>
<p>test</p>
<div><pre class="hljs"><code>| terraform init
Initializing provider plugins...
...
Reusing previous version of hashicorp/google from the dependency lock file
<span class="hljs-number">2022</span>-<span class="hljs-number">02</span>-<span class="hljs-number">01</span>T21:<span class="hljs-number">24</span>:<span class="hljs-number">34.872</span>-<span class="hljs-number">0600</span> [DEBUG] Querying available versions of provider registry.terraform.io<span class="hljs-regexp">/hashicorp/g</span>oogle at network mirror https:<span class="hljs-regexp">//</span>storage.googleapis.com<span class="hljs-regexp">/terraform-registry/mi</span>rror/
<span class="hljs-number">2022</span>-<span class="hljs-number">02</span>-<span class="hljs-number">01</span>T21:<span class="hljs-number">24</span>:<span class="hljs-number">34.873</span>-<span class="hljs-number">0600</span> [DEBUG] GET https:<span class="hljs-regexp">//</span>storage.googleapis.com<span class="hljs-regexp">/terraform-registry/mi</span>rror<span class="hljs-regexp">/registry.terraform.io/</span>hashicorp<span class="hljs-regexp">/google/i</span>ndex.json
<span class="hljs-number">2022</span>-<span class="hljs-number">02</span>-<span class="hljs-number">01</span>T21:<span class="hljs-number">24</span>:<span class="hljs-number">34.876</span>-<span class="hljs-number">0600</span> [TRACE] HTTP client GET request to https:<span class="hljs-regexp">//</span>storage.googleapis.com<span class="hljs-regexp">/terraform-registry/mi</span>rror<span class="hljs-regexp">/registry.terraform.io/</span>hashicorp<span class="hljs-regexp">/google/i</span>ndex.json
...
Terraform has been successfully initialized!
</code></pre></div>
<p>Note that it downloaded from our GCS mirror</p>
</li>
</ul>
</li>
</ol>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Running Harbor container registry on Kubernetes]]></title>
            <guid>7bdcd90422ed44d3a1cee7313f25e7f4</guid>
            <pubDate>Tue, 23 Jan 2024 01:28:45 GMT</pubDate>
            <content:encoded><![CDATA[<p>Original Date: 08/14/2020</p>
<hr />
<p>layout: page<br />
title: Running Harbor container registry on Kubernetes<br />
categories: [tech]<br />
tags: [tech, kubernetes, minikube, harbor, helm, docker, DCT, notary]</p>
<hr />
<h2 id="overview">Overview</h2>
<p><a title="https://goharbor.io/" href="https://goharbor.io/">Harbor</a> is relatively new and popular container registry. If you are running your own kubernetes/container environment, then using this as a private registry may be a good choice. This covers the basic deployment process using minikube.</p>
<h2 id="prerequisites">Prerequisites</h2>
<ul>
<li>kubernetes setup including, minikube and kubectl</li>
<li>helm 3</li>
<li>virtualbox</li>
</ul>
<h2 id="installation">Installation</h2>
<ul>
<li>start minikube using virtualbox driver, and enable ingress<div><pre class="hljs"><code>minikube <span class="hljs-keyword">start</span> <span class="hljs-comment">--vm-driver virtualbox</span>
minikube addons <span class="hljs-keyword">enable</span> ingress
# <span class="hljs-keyword">to</span> see the list <span class="hljs-keyword">of</span> <span class="hljs-keyword">add</span> ons
minikube addons list</code></pre></div>
<ul>
<li>Because we will be setting up harbor services using ingress, we need the virtualbox driver</li>
<li>If we were using NodePort, we could have used docker driver</li>
</ul>
</li>
<li>Clone <a title="https://github.com/goharbor/harbor-helm" href="https://github.com/goharbor/harbor-helm">harbor repo</a>, and cd to the repo
<ul>
<li>we are deploying staright from repo</li>
</ul>
</li>
<li>Setup harbor namespace</li>
</ul>
<div><pre class="hljs"><code><span class="hljs-string">kubectl</span> <span class="hljs-string">create</span> <span class="hljs-string">namespace</span> <span class="hljs-string">harbor</span>
<span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-context</span> <span class="hljs-built_in">--current</span> <span class="hljs-built_in">--namespace</span> <span class="hljs-string">harbor</span>
<span class="hljs-string">helm</span> <span class="hljs-string">install</span> <span class="hljs-string">harbor</span> .</code></pre></div>
<ul>
<li>
<p>Setup hosts file (simulate dns for ingress)</p>
<ul>
<li>find out the ip address for ingress</li>
</ul>
<div><pre class="hljs"><code>| =&gt; minikube ip
<span class="hljs-number">192.168</span><span class="hljs-number">.99</span><span class="hljs-number">.103</span>

| =&gt; kg ingress
eNAME                           <span class="hljs-keyword">CLASS</span>    HOSTS                  ADDRESS   PORTS     AGE
harbor-harbor-ingress          &lt;<span class="hljs-keyword">none</span>&gt;   core.harbor.<span class="hljs-keyword">domain</span>               <span class="hljs-number">80</span>, <span class="hljs-number">443</span>   <span class="hljs-number">6</span>m17s
harbor-harbor-ingress-notary   &lt;<span class="hljs-keyword">none</span>&gt;   notary.harbor.<span class="hljs-keyword">domain</span>             <span class="hljs-number">80</span>, <span class="hljs-number">443</span>   <span class="hljs-number">6</span>m17s

| =&gt; kubectl describe ingress 
<span class="hljs-type">Name</span>:             harbor-harbor-ingress
Namespace:        harbor
Address:          <span class="hljs-number">192.168</span><span class="hljs-number">.99</span><span class="hljs-number">.103</span>
</code></pre></div>
<ul>
<li>Setup hosts file: on mac, add to /etc/hosts, the following</li>
</ul>
<div><pre class="hljs"><code><span class="hljs-number">192.168.99.103</span> core.harbor.domain
<span class="hljs-number">192.168.99.103</span> notary.harbor.domain</code></pre></div>
<ul>
<li>At this point you should be able to access harbor on: <a title="https://core.harbor.domain/" href="https://core.harbor.domain/">https://core.harbor.domain</a> using the deafult username and password
<ul>
<li>username: admin</li>
<li>password: Harbor12345</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="configuring-docker-client">Configuring Docker Client</h2>
<p>Even though harbor UI is up, docker client will not be able to access it since we haven't installed harbor certificates yet.</p>
<ul>
<li>Configure docker daemon to use: we can use mac's docker daemon or the one in minikube. Here we will use the one in minikube (it's closer to how linux is setup)</li>
</ul>
<div><pre class="hljs"><code>eval <span class="hljs-constructor">$(<span class="hljs-params">minikube</span> <span class="hljs-params">docker</span>-<span class="hljs-params">env</span>)</span></code></pre></div>
<ul>
<li>Get the certificates from kubernetes secrets</li>
</ul>
<div><pre class="hljs"><code><span class="hljs-comment"># the base64 command on linux would use -d </span>
kubectl -n harbor <span class="hljs-built_in">get</span> secrets harbor-harbor-ingress -o <span class="hljs-attribute">jsonpath</span>=<span class="hljs-string">"{.data['ca\.crt']}"</span> | base64 -D &gt; harbor-ca.crt</code></pre></div>
<ul>
<li>
<p>Install certificates in docker daemon:</p>
<div><pre class="hljs"><code><span class="hljs-comment"># copy the certificate</span>
scp -o IdentitiesOnly=yes -i $(minikube ssh-key) harbor-ca.crt docker@$(minikube ip):./harbor-ca.crt

<span class="hljs-comment"># install the certificate by logging in)</span>
minikube ssh
sudo mkdir -p <span class="hljs-regexp">/etc/</span>docker<span class="hljs-regexp">/certs.d/</span>core.harbor.domain
sudo cp harbor-ca.crt <span class="hljs-regexp">/etc/</span>docker<span class="hljs-regexp">/certs.d/</span>core.harbor.domain

<span class="hljs-comment"># exit back to mac</span>
<span class="hljs-keyword">exit</span>
</code></pre></div>
</li>
<li>
<p>configure notary certificates (optional - required only if notary or DCT is needed)<br />
Same ingress is used by the notary/Docker Content Trust as well, and the certificate needs to be configured for it's use as well (more on this below).<br />
We will be configuring this on the docker client side (ie mac)</p>
<div><pre class="hljs"><code>| =&gt; cp harbor-ca.crt <span class="hljs-regexp">/Users/</span>admin<span class="hljs-regexp">/.docker/</span>tls/notary.harbor.domain</code></pre></div>
</li>
<li>
<p>Now test the client by logging in, and pushing an image</p>
<div><pre class="hljs"><code>| =&gt; docker <span class="hljs-keyword">login</span> core.harbor.<span class="hljs-keyword">domain</span> <span class="hljs-comment">--username=admin --password Harbor12345</span>
<span class="hljs-built_in">WARNING</span>! <span class="hljs-keyword">Using</span> <span class="hljs-comment">--password via the CLI is insecure. Use --password-stdin.</span>
<span class="hljs-keyword">Login</span> Succeeded

docker pull hello-world

| =&gt; docker tag hello-world core.harbor.<span class="hljs-keyword">domain</span>/library/hello-world:<span class="hljs-number">1</span>
| =&gt; docker push core.harbor.<span class="hljs-keyword">domain</span>/library/hello-world:<span class="hljs-number">1</span>
The push refers <span class="hljs-keyword">to</span> repository [core.harbor.<span class="hljs-keyword">domain</span>/library/hello-world]
<span class="hljs-number">9</span>c27e219663c: Layer already <span class="hljs-keyword">exists</span> 
<span class="hljs-number">1</span>: digest: sha256:<span class="hljs-number">90659</span>bf80b44ce6be8234e6ff90a1ac34acbeb826903b02cfa0da11c82cbc042 size: <span class="hljs-number">525</span>
</code></pre></div>
</li>
</ul>
<h2 id="using-docker-content-trust">Using Docker Content Trust</h2>
<ul>
<li>
<p>The certificates required for notary have already been setup (see above)</p>
</li>
<li>
<p>We can enable DCT by configuring certain environment variables</p>
<div><pre class="hljs"><code><span class="hljs-built_in">export</span> <span class="hljs-attribute">DOCKER_CONTENT_TRUST</span>=1
<span class="hljs-built_in">export</span> <span class="hljs-attribute">DOCKER_CONTENT_TRUST_SERVER</span>=https://notary.harbor.domain</code></pre></div>
</li>
<li>
<p>Now we can sign and push an image. While there are other advanced ways of doing this, we will be using a simple push</p>
<div><pre class="hljs"><code># Running in debug mode to see more details
# also in our <span class="hljs-keyword">case</span> we already have root keys created and loaded
| =&gt; docker -l=debug <span class="hljs-keyword">push</span> core.harbor.domain<span class="hljs-regexp">/library/</span>hello-world:<span class="hljs-number">1</span>
The <span class="hljs-keyword">push</span> refers to repository [core.harbor.domain<span class="hljs-regexp">/library/</span>hello-world]
<span class="hljs-number">9</span>c27e219663c: Layer already exists 
<span class="hljs-number">1</span>: digest: sha256:<span class="hljs-number">90659</span>bf80b44ce6be8234e6ff90a1ac34acbeb826903b02cfa0da11c82cbc042 <span class="hljs-keyword">size</span>: <span class="hljs-number">525</span>
Signing and pushing trust metadata
DEBU[<span class="hljs-number">0001</span>] reading certificate directory: <span class="hljs-regexp">/Users/</span>admin<span class="hljs-regexp">/.docker/</span>tls/notary.harbor.domain 
DEBU[<span class="hljs-number">0001</span>] crt: <span class="hljs-regexp">/Users/</span>admin<span class="hljs-regexp">/.docker/</span>tls<span class="hljs-regexp">/notary.harbor.domain/</span>core_harbor_domain_ca_root.crt 
DEBU[<span class="hljs-number">0001</span>] crt: <span class="hljs-regexp">/Users/</span>admin<span class="hljs-regexp">/.docker/</span>tls<span class="hljs-regexp">/notary.harbor.domain/</span>harbor-ca.crt 
DEBU[<span class="hljs-number">0001</span>] crt: <span class="hljs-regexp">/Users/</span>admin<span class="hljs-regexp">/.docker/</span>tls<span class="hljs-regexp">/notary.harbor.domain/i</span>ngress.tls.crt 
DEBU[<span class="hljs-number">0002</span>] No yubikey found, using alternative key storage: no library found 
DEBU[<span class="hljs-number">0002</span>] Making dir path: <span class="hljs-regexp">/Users/</span>admin<span class="hljs-regexp">/.docker/</span>trust<span class="hljs-regexp">/tuf/</span>core.harbor.domain<span class="hljs-regexp">/library/</span>hello-world/changelist 
DEBU[<span class="hljs-number">0002</span>] received HTTP status <span class="hljs-number">404</span> when requesting root. 
DEBU[<span class="hljs-number">0002</span>] No yubikey found, using alternative key storage: no library found 
DEBU[<span class="hljs-number">0002</span>] No yubikey found, using alternative key storage: no library found 
Enter passphrase <span class="hljs-keyword">for</span> root key with ID c7c1603: 
DEBU[<span class="hljs-number">0009</span>] generated ECDSA key with keyID: d95c306804340d51995c30a1dbaa81ba8ea9f2af871eef171bdcc934e3784bc7 
DEBU[<span class="hljs-number">0009</span>] generated <span class="hljs-keyword">new</span> ecdsa key <span class="hljs-keyword">for</span> role: targets and keyID: d95c306804340d51995c30a1dbaa81ba8ea9f2af871eef171bdcc934e3784bc7 
Enter passphrase <span class="hljs-keyword">for</span> <span class="hljs-keyword">new</span> repository key with ID d95c306:
Repeat passphrase <span class="hljs-keyword">for</span> <span class="hljs-keyword">new</span> repository key with ID d95c306:
DEBU[<span class="hljs-number">0018</span>] got remote timestamp ecdsa key with keyID: abd474e548219093df0ceb233ba4196a7e8d810d1643b515a68e08828c85f732 
DEBU[<span class="hljs-number">0018</span>] got remote snapshot ecdsa key with keyID: ecdd284ddd45ad506594ee4069abfc18bbb01b85aa2c06384e52a115b5514343 
DEBU[<span class="hljs-number">0018</span>] generating <span class="hljs-keyword">new</span> snapshot...                   
DEBU[<span class="hljs-number">0018</span>] Saving changes to Trusted Collection.        
DEBU[<span class="hljs-number">0018</span>] signing root...                              
DEBU[<span class="hljs-number">0018</span>] sign called with <span class="hljs-number">1</span>/<span class="hljs-number">1</span> required keys           
DEBU[<span class="hljs-number">0018</span>] No yubikey found, using alternative key storage: no library found 
DEBU[<span class="hljs-number">0018</span>] sign called with <span class="hljs-number">0</span>/<span class="hljs-number">0</span> required keys           
DEBU[<span class="hljs-number">0018</span>] sign targets called <span class="hljs-keyword">for</span> role targets         
DEBU[<span class="hljs-number">0018</span>] sign called with <span class="hljs-number">1</span>/<span class="hljs-number">1</span> required keys           
DEBU[<span class="hljs-number">0018</span>] No yubikey found, using alternative key storage: no library found 
DEBU[<span class="hljs-number">0018</span>] sign called with <span class="hljs-number">0</span>/<span class="hljs-number">0</span> required keys           
Finished initializing <span class="hljs-string">"core.harbor.domain/library/hello-world"</span>
DEBU[<span class="hljs-number">0018</span>] Adding target <span class="hljs-string">"1"</span> with sha256 <span class="hljs-string">"90659bf80b44ce6be8234e6ff90a1ac34acbeb826903b02cfa0da11c82cbc042"</span> and <span class="hljs-keyword">size</span> <span class="hljs-number">525</span> bytes. 
DEBU[<span class="hljs-number">0018</span>] entered ValidateRoot with dns: core.harbor.domain<span class="hljs-regexp">/library/</span>hello-world 
DEBU[<span class="hljs-number">0018</span>] found the following root keys: [c1b0a7a23fcc03ab9b66a8a6b804a766614461971cbc76209654c165695e1286] 
DEBU[<span class="hljs-number">0018</span>] found <span class="hljs-number">1</span> valid leaf certificates <span class="hljs-keyword">for</span> core.harbor.domain<span class="hljs-regexp">/library/</span>hello-world: c1b0a7a23fcc03ab9b66a8a6b804a766614461971cbc76209654c165695e1286 
DEBU[<span class="hljs-number">0018</span>] found <span class="hljs-number">1</span> leaf certs, of which <span class="hljs-number">1</span> are valid leaf certs <span class="hljs-keyword">for</span> core.harbor.domain<span class="hljs-regexp">/library/</span>hello-world 
DEBU[<span class="hljs-number">0018</span>] checking root against trust_pinning config <span class="hljs-keyword">for</span> core.harbor.domain<span class="hljs-regexp">/library/</span>hello-world 
DEBU[<span class="hljs-number">0018</span>] checking trust-pinning <span class="hljs-keyword">for</span> cert: c1b0a7a23fcc03ab9b66a8a6b804a766614461971cbc76209654c165695e1286 
DEBU[<span class="hljs-number">0018</span>]  role has key IDs: c1b0a7a23fcc03ab9b66a8a6b804a766614461971cbc76209654c165695e1286 
DEBU[<span class="hljs-number">0018</span>] verifying signature <span class="hljs-keyword">for</span> key ID: c1b0a7a23fcc03ab9b66a8a6b804a766614461971cbc76209654c165695e1286 
DEBU[<span class="hljs-number">0018</span>] root validation succeeded <span class="hljs-keyword">for</span> core.harbor.domain<span class="hljs-regexp">/library/</span>hello-world 
DEBU[<span class="hljs-number">0018</span>] entered ValidateRoot with dns: core.harbor.domain<span class="hljs-regexp">/library/</span>hello-world 
DEBU[<span class="hljs-number">0018</span>] found the following root keys: [c1b0a7a23fcc03ab9b66a8a6b804a766614461971cbc76209654c165695e1286] 
DEBU[<span class="hljs-number">0018</span>] found <span class="hljs-number">1</span> valid leaf certificates <span class="hljs-keyword">for</span> core.harbor.domain<span class="hljs-regexp">/library/</span>hello-world: c1b0a7a23fcc03ab9b66a8a6b804a766614461971cbc76209654c165695e1286 
DEBU[<span class="hljs-number">0018</span>] found <span class="hljs-number">1</span> leaf certs, of which <span class="hljs-number">1</span> are valid leaf certs <span class="hljs-keyword">for</span> core.harbor.domain<span class="hljs-regexp">/library/</span>hello-world 
DEBU[<span class="hljs-number">0018</span>] checking root against trust_pinning config <span class="hljs-keyword">for</span> core.harbor.domain<span class="hljs-regexp">/library/</span>hello-world 
DEBU[<span class="hljs-number">0018</span>] checking trust-pinning <span class="hljs-keyword">for</span> cert: c1b0a7a23fcc03ab9b66a8a6b804a766614461971cbc76209654c165695e1286 
DEBU[<span class="hljs-number">0018</span>]  role has key IDs: c1b0a7a23fcc03ab9b66a8a6b804a766614461971cbc76209654c165695e1286 
DEBU[<span class="hljs-number">0018</span>] verifying signature <span class="hljs-keyword">for</span> key ID: c1b0a7a23fcc03ab9b66a8a6b804a766614461971cbc76209654c165695e1286 
DEBU[<span class="hljs-number">0018</span>] root validation succeeded <span class="hljs-keyword">for</span> core.harbor.domain<span class="hljs-regexp">/library/</span>hello-world 
DEBU[<span class="hljs-number">0018</span>] received HTTP status <span class="hljs-number">404</span> when requesting root. 
DEBU[<span class="hljs-number">0018</span>] Loading trusted collection.                  
DEBU[<span class="hljs-number">0018</span>] entered ValidateRoot with dns: core.harbor.domain<span class="hljs-regexp">/library/</span>hello-world 
DEBU[<span class="hljs-number">0018</span>] found the following root keys: [c1b0a7a23fcc03ab9b66a8a6b804a766614461971cbc76209654c165695e1286] 
DEBU[<span class="hljs-number">0018</span>] found <span class="hljs-number">1</span> valid leaf certificates <span class="hljs-keyword">for</span> core.harbor.domain<span class="hljs-regexp">/library/</span>hello-world: c1b0a7a23fcc03ab9b66a8a6b804a766614461971cbc76209654c165695e1286 
DEBU[<span class="hljs-number">0018</span>] found <span class="hljs-number">1</span> leaf certs, of which <span class="hljs-number">1</span> are valid leaf certs <span class="hljs-keyword">for</span> core.harbor.domain<span class="hljs-regexp">/library/</span>hello-world 
DEBU[<span class="hljs-number">0018</span>] checking root against trust_pinning config <span class="hljs-keyword">for</span> core.harbor.domain<span class="hljs-regexp">/library/</span>hello-world 
DEBU[<span class="hljs-number">0018</span>] checking trust-pinning <span class="hljs-keyword">for</span> cert: c1b0a7a23fcc03ab9b66a8a6b804a766614461971cbc76209654c165695e1286 
DEBU[<span class="hljs-number">0018</span>]  role has key IDs: c1b0a7a23fcc03ab9b66a8a6b804a766614461971cbc76209654c165695e1286 
DEBU[<span class="hljs-number">0018</span>] verifying signature <span class="hljs-keyword">for</span> key ID: c1b0a7a23fcc03ab9b66a8a6b804a766614461971cbc76209654c165695e1286 
DEBU[<span class="hljs-number">0018</span>] root validation succeeded <span class="hljs-keyword">for</span> core.harbor.domain<span class="hljs-regexp">/library/</span>hello-world 
DEBU[<span class="hljs-number">0018</span>] targets role has key IDs: d95c306804340d51995c30a1dbaa81ba8ea9f2af871eef171bdcc934e3784bc7 
DEBU[<span class="hljs-number">0018</span>] verifying signature <span class="hljs-keyword">for</span> key ID: d95c306804340d51995c30a1dbaa81ba8ea9f2af871eef171bdcc934e3784bc7 
DEBU[<span class="hljs-number">0018</span>] changelist add: <span class="hljs-number">1</span>                            
DEBU[<span class="hljs-number">0018</span>] No yubikey found, using alternative key storage: no library found 
DEBU[<span class="hljs-number">0018</span>] applied <span class="hljs-number">1</span> change(s)                          
DEBU[<span class="hljs-number">0018</span>] sign targets called <span class="hljs-keyword">for</span> role targets         
DEBU[<span class="hljs-number">0018</span>] sign called with <span class="hljs-number">1</span>/<span class="hljs-number">1</span> required keys           
DEBU[<span class="hljs-number">0018</span>] No yubikey found, using alternative key storage: no library found 
DEBU[<span class="hljs-number">0018</span>] sign called with <span class="hljs-number">0</span>/<span class="hljs-number">0</span> required keys           
DEBU[<span class="hljs-number">0018</span>] generating <span class="hljs-keyword">new</span> snapshot...                   
DEBU[<span class="hljs-number">0018</span>] signing snapshot...                          
DEBU[<span class="hljs-number">0018</span>] sign called with <span class="hljs-number">1</span>/<span class="hljs-number">1</span> required keys           
DEBU[<span class="hljs-number">0018</span>] No yubikey found, using alternative key storage: no library found 
DEBU[<span class="hljs-number">0018</span>] Client does not have the key to sign snapshot. Assuming that server should sign the snapshot. 
Successfully signed core.harbor.domain<span class="hljs-regexp">/library/</span>hello-world:<span class="hljs-number">1</span>
</code></pre></div>
</li>
<li>
<p>We can now verify that the image has been signed (notice that the repository key is the same that was created above while pushing)</p>
<div><pre class="hljs"><code>| =&gt; docker trust <span class="hljs-keyword">inspect</span> core.harbor.domain<span class="hljs-regexp">/library/</span>hello-world --pretty

Signatures <span class="hljs-keyword">for</span> core.harbor.domain<span class="hljs-regexp">/library/</span>hello-world

SIGNED TAG          DIGEST                                                             SIGNERS
<span class="hljs-number">1</span>                   <span class="hljs-number">90659</span>bf80b44ce6be8234e6ff90a1ac34acbeb826903b02cfa0da11c82cbc042   (Repo Admin)

Administrative keys <span class="hljs-keyword">for</span> core.harbor.domain<span class="hljs-regexp">/library/</span>hello-world

  Repository Key:	d95c306804340d51995c30a1dbaa81ba8ea9f2af871eef171bdcc934e3784bc7
  Root Key:	c1b0a7a23fcc03ab9b66a8a6b804a766614461971cbc76209654c165695e1286</code></pre></div>
</li>
<li>
<p>References</p>
<ul>
<li><a title="https://docs.docker.com/engine/security/trust/" href="https://docs.docker.com/engine/security/trust/">Using Trusted Image</a><br />
<a title="https://docs.docker.com/engine/security/trust/content_trust/" href="https://docs.docker.com/engine/security/trust/content_trust/">Content trust in Docker | Docker Documentation (docs.docker.com)</a></li>
</ul>
</li>
</ul>
<h2 id="notary-client">Notary Client</h2>
<ul>
<li>We can also perform advanced notary operation using the <a title="https://github.com/theupdateframework/notary" href="https://github.com/theupdateframework/notary">notary</a> client.</li>
</ul>
<h3 id="configuring-the-notary-client">Configuring the notary client</h3>
<pre><code>* Download the notary client from [the official releases page](https://github.com/theupdateframework/notary/releases). These are pre-compiled images so just download, make executable and add to the path
* Setup the configuration file (all arguments can also be supplied on the command line but this makes it easier). The harbor certificate file is the same we created above:
```
# ignore trust pinning settings for now
# 
| =&gt; mkdir ~/.notary directory
| =&gt; cat ~/.notary/config.json 
{
  "trust_dir" : "~/.docker/trust",
  "remote_server": {
  "url": "https://notary.harbor.domain",
  "root_ca": "/Users/admin/github/harbor-helm/harbor-ca.crt"
},
"trust_pinning": {
  "certs": {
    "docker.com/notary": ["49cf5c6404a35fa41d5a5aa2ce539dfee0d7a2176d0da488914a38603b1f4292"]
  }
}
</code></pre>
<p>}</p>
<div><pre class="hljs"><code>
### <span class="hljs-keyword">Using</span> the notary client
* This only provides some basic sample commands, <span class="hljs-keyword">for</span> details <span class="hljs-keyword">on</span> how <span class="hljs-keyword">to</span> use, please see the notary documentation
* We can verify the signatures <span class="hljs-keyword">using</span> the notary client
  ```
  | =&gt; notary list core.harbor.domain/library/hello-world
  NAME    DIGEST                                                              SIZE (BYTES)           ROLE
   ----    ------                                                              ------------    ----
  <span class="hljs-number">1</span>       <span class="hljs-number">90659</span>bf80b44ce6be8234e6ff90a1ac34acbeb826903b02cfa0da11c82cbc042    <span class="hljs-number">525</span>             targets
  ```
* <span class="hljs-keyword">To</span> initialize a <span class="hljs-built_in">new</span> repo
  ```
  | =&gt; notary init core.harbor.domain/library/ex1
  Root <span class="hljs-keyword">key</span> found, <span class="hljs-keyword">using</span>: c7c1603c6f89a72bc80165c11617483fb75480f5fe54a1bf911c3d3441ba0474
  Enter passphrase <span class="hljs-keyword">for</span> root <span class="hljs-keyword">key</span> <span class="hljs-keyword">with</span> ID c7c1603: 
  Enter passphrase <span class="hljs-keyword">for</span> <span class="hljs-built_in">new</span> targets <span class="hljs-keyword">key</span> <span class="hljs-keyword">with</span> ID a03454d: 
  Repeat passphrase <span class="hljs-keyword">for</span> <span class="hljs-built_in">new</span> targets <span class="hljs-keyword">key</span> <span class="hljs-keyword">with</span> ID a03454d: 
  Enter passphrase <span class="hljs-keyword">for</span> <span class="hljs-built_in">new</span> snapshot <span class="hljs-keyword">key</span> <span class="hljs-keyword">with</span> ID <span class="hljs-number">6</span>bd9be7: 
  Repeat passphrase <span class="hljs-keyword">for</span> <span class="hljs-built_in">new</span> snapshot <span class="hljs-keyword">key</span> <span class="hljs-keyword">with</span> ID <span class="hljs-number">6</span>bd9be7: 
  Enter username: admin
  Enter password: 
  ```</code></pre></div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How to create a static blog using Jekyll and GitHub]]></title>
            <guid>e0052f8b59a4445690889d2b0525b44c</guid>
            <pubDate>Tue, 23 Jan 2024 01:25:53 GMT</pubDate>
            <content:encoded><![CDATA[<p>Original Date: 07/15/2020</p>
<h2 id="overview">Overview</h2>
<p>A static blog can easily be hosted in GitHub. Here we will be using <a title="https://github.com/poole/lanyon" href="https://github.com/poole/lanyon">Lanyon</a> theme which is a variant of <a title="https://github.com/poole/poole" href="https://github.com/poole/poole">poole</a>. This post won't be covering the basics of Jekyll but the resources given below provide a good overview of the same.</p>
<h2 id="quick-start">Quick Start</h2>
<p>To get up and running in two minutes, the following steps can be used:</p>
<ul>
<li>Fork <a title="https://github.com/poole/lanyon" href="https://github.com/poole/lanyon">https://github.com/poole/lanyon</a></li>
<li>Rename this to: youraccountname.github.io</li>
<li>Update _config.yml (master branch is default)
<ol>
<li>Update Name, title, etc</li>
<li>baseUrl needs to be blank("") if this is the default domain</li>
</ol>
</li>
<li>Update CNAME to your domain name if you have one, or blank this out</li>
<li>Once published, you can access the site on youraccountname.github.io (or your domain of you configured it)</li>
</ul>
<h2 id="how-does-this-work">How does this work</h2>
<ul>
<li>All the references within _posts get processed</li>
<li>all md files get processed and can be accessed without extension</li>
<li>any html/md files at root level get added to the sidebar</li>
<li>if there are any processing issues, github will notify you via email</li>
</ul>
<h2 id="customizations">Customizations</h2>
<ol>
<li>Create a separate blog collection</li>
<li>Customize sidebar</li>
<li>Add categories and tags indices</li>
<li>Add archive page</li>
<li>Enable commenting using Disqus</li>
<li>Add google analytics</li>
<li>Add gravatar pic to the sidebar</li>
<li>Add favicon</li>
<li>Add social media buttons</li>
</ol>
<h2 id="tips">Tips</h2>
<ol>
<li>Simple markdown can be used to make blog/site entries. But if needed, a <a title="https://prose.io/" href="https://prose.io/">prose.io</a> can be used as an online editor.</li>
<li>You can clone another repo in your github account (other than the default static page one) and use the baseUrl to access it. Example: <a title="http://blog.namitsaxena.com/poole/" href="http://blog.namitsaxena.com/poole/">http://blog.namitsaxena.com/poole</a></li>
</ol>
<h2 id="other-popular-themes">Other Popular Themes</h2>
<ul>
<li><a title="https://github.com/poole/poole" href="https://github.com/poole/poole">Poole</a>: provide a clear and concise foundational setup for any Jekyll site. It does so by furnishing a full vanilla Jekyll install with example templates, pages, posts, and styles.
<ul>
<li><a title="https://github.com/poole/lanyon" href="https://github.com/poole/lanyon">Poole/Lanyon</a>: Lanyon is an unassuming Jekyll theme that places content first by tucking away navigation in a hidden drawer.
<ul>
<li>Example: <a title="https://codinfox.github.io/dev/2015/03/06/use-tags-and-categories-in-your-jekyll-based-github-pages/" href="https://codinfox.github.io/dev/2015/03/06/use-tags-and-categories-in-your-jekyll-based-github-pages/">codinfox.github.io</a></li>
</ul>
</li>
<li><a title="https://github.com/poole/hyde" href="https://github.com/poole/hyde">Poole/Hyde</a>: Hyde is a brazen two-column Jekyll theme that pairs a prominent sidebar with uncomplicated content.
<ul>
<li>Example: <a title="https://longqian.me/2017/02/09/github-jekyll-tag/" href="https://longqian.me/2017/02/09/github-jekyll-tag/">longqian.me</a></li>
</ul>
</li>
</ul>
</li>
<li><a title="https://github.com/bencentra/centrarium" href="https://github.com/bencentra/centrarium">centrarium</a>: A simple yet classy theme for your Jekyll website or blog.
<ul>
<li>Example <a title="https://www.nikhita.dev/build-blog-using-github-jekyll" href="https://www.nikhita.dev/build-blog-using-github-jekyll">www.nikhita.dev</a></li>
</ul>
</li>
<li><a title="https://github.com/barryclark/jekyll-now" href="https://github.com/barryclark/jekyll-now">Jekyll-Now</a>: Simple static site generator that's perfect for GitHub hosted blogs</li>
<li><a title="https://github.com/daattali/beautiful-jekyll" href="https://github.com/daattali/beautiful-jekyll">beautiful-jekyll</a>: ready-to-use template to help you create a beautiful website quickly. Perfect for personal sites, blogs, or simple project websites
<ul>
<li>Example <a title="https://beautifuljekyll.com/" href="https://beautifuljekyll.com/">https://beautifuljekyll.com/</a></li>
</ul>
</li>
<li><a title="https://pmarsceill.github.io/just-the-docs/" href="https://pmarsceill.github.io/just-the-docs/">pmarsceill.github.io</a>: Focus on writing good documentation</li>
</ul>
<h2 id="references">References</h2>
<ul>
<li><a title="https://jekyllrb.com/docs/" href="https://jekyllrb.com/docs/">Jekyll Official Documentation</a></li>
<li><a title="http://jekyllbootstrap.com/lessons/jekyll-introduction.html" href="http://jekyllbootstrap.com/lessons/jekyll-introduction.html">Jekyll Introduction</a></li>
<li><a title="https://jekyllrb.com/docs/step-by-step/01-setup/" href="https://jekyllrb.com/docs/step-by-step/01-setup/">Jekyll: Step by Step</a></li>
<li><a title="https://www.nikhita.dev/build-blog-using-github-jekyll" href="https://www.nikhita.dev/build-blog-using-github-jekyll">How to build a blog using Github, Jekyll and Lanyon by Nikhita Raghunath</a></li>
<li><a title="https://codinfox.github.io/dev/2015/03/06/use-tags-and-categories-in-your-jekyll-based-github-pages/" href="https://codinfox.github.io/dev/2015/03/06/use-tags-and-categories-in-your-jekyll-based-github-pages/">Use Tags and Categories in your Jekyll based Github Pages without plugins</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Links]]></title>
            <guid>cb9457f9efb7498e94053ddfcd523921</guid>
            <pubDate>Sat, 20 Jan 2024 17:00:53 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="ai-and-ml">AI and ML</h2>
<ul>
<li><a title="http://neuralnetworksanddeeplearning.com/" href="http://neuralnetworksanddeeplearning.com/">Neural Networks and Deep Learning</a> is a free online book.</li>
</ul>
<h2 id="crypto">Crypto</h2>
<ul>
<li><a title="https://michaelnielsen.org/ddi/how-the-bitcoin-protocol-actually-works/" href="https://michaelnielsen.org/ddi/how-the-bitcoin-protocol-actually-works/">How the Bitcoin protocol actually works</a></li>
</ul>
<h2 id="general">General</h2>
<ul>
<li><a title="https://michaelnielsen.org/" href="https://michaelnielsen.org/">https://michaelnielsen.org/</a> - Interesting articles and books</li>
<li></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Large Language Models (LLMs)]]></title>
            <guid>a00e5d71e3f240c38c410c1848d39f8f</guid>
            <pubDate>Wed, 01 Nov 2023 03:09:14 GMT</pubDate>
            <content:encoded><![CDATA[<ul>
<li>
<h2 id="concepts">Concepts</h2>
<ul>
<li>
<h3 id="generative-ai">Generative AI</h3>
<ul>
<li>Generative AI is called generative because the AI creates something that didn’t previously exist. That’s what makes it different from <strong>discriminative AI</strong>, which draws distinctions between different kinds of input. To say it differently, discriminative AI tries to answer a question like “Is this image a drawing of a rabbit or a lion?” whereas generative AI responds to prompts like “Draw me a picture of a lion and a rabbit sitting next to each other.”<a title="https://www.infoworld.com/article/3689973/what-is-generative-ai-artificial-intelligence-that-creates.html" href="https://www.infoworld.com/article/3689973/what-is-generative-ai-artificial-intelligence-that-creates.html">[www.infoworld.com]</a></li>
</ul>
</li>
<li>
<h3 id="models">Models</h3>
<ul>
<li>AI model is a tool or algorithm which is based on a certain data set through which it can arrive at a decision – all without the need for human interference in the decision-making process.
<ul>
<li>A deep learning model, or a DL model, is a neural network that has been trained to learn how to perform a task, such as recognizing objects in digital images and videos, or understanding human speech. Deep learning models are trained by using large sets of data and algorithms that enable the model to learn how to perform the task. The more data the model is trained on, the better it can learn to perform the task.</li>
</ul>
</li>
</ul>
</li>
<li>Model <strong>Parameters Count</strong> (“Parameters”): Model parameter count or “number of parameters” refers to the number of weights in all layers of a model. As a general rule, the more parameters a model has, the more capable and accurate it is assumed to be,[<a title="https://sambanova.ai/blog/generative-ai-terms/" href="https://sambanova.ai/blog/generative-ai-terms/">sambanova.ai</a>]</li>
<li><strong>Prompt</strong>: An interface where a user can interact with a generative AI model using natural language. Within these prompt interfaces, a user can make a specific request of a model such as “Write a paragraph summary of generative AI”, or “Draw a picture with horses running through a field with a forest in the background, during the spring”[<a title="https://sambanova.ai/blog/generative-ai-terms/" href="https://sambanova.ai/blog/generative-ai-terms/">sambanova.ai</a>]
<ul>
<li>Giving Large Language Models Context | by Simon Attard | Medium[<a title="https://medium.com/@simon_attard/giving-large-language-models-context-2d1956a6a017" href="https://medium.com/@simon_attard/giving-large-language-models-context-2d1956a6a017">medium.com</a>]</li>
</ul>
</li>
<li>Fine Tuning</li>
<li>Application Architecture
<ul>
<li><a title="https://a16z.com/emerging-architectures-for-llm-applications/" href="https://a16z.com/emerging-architectures-for-llm-applications/">Emerging Architectures for LLM Applications | Andreessen Horowitz[a16z.com]</a></li>
<li><a title="https://meltano.com/blog/llm-apps-are-mostly-data-pipelines/" href="https://meltano.com/blog/llm-apps-are-mostly-data-pipelines/">LLM Apps Are Mostly Data Pipelines[meltano.com]</a></li>
</ul>
</li>
<li>RAG
<ul>
<li><a title="https://stackoverflow.blog/2023/10/18/retrieval-augmented-generation-keeping-llms-relevant-and-current/" href="https://stackoverflow.blog/2023/10/18/retrieval-augmented-generation-keeping-llms-relevant-and-current/">Retrieval augmented generation: Keeping LLMs relevant and current - Stack Overflow[stackoverflow.blog]</a></li>
<li><strong>In-context learning</strong> (used with RAG) sends context to pre-trained models as part of the prompt at runtime to help it understand more about your question. Whereas fine tuning is further training the pre-trained models to take into account a new set of contextual data then all future prompts go directly to your new iteration of the model.<a title="https://meltano.com/blog/llm-apps-are-mostly-data-pipelines/" href="https://meltano.com/blog/llm-apps-are-mostly-data-pipelines/">[meltano.com]</a></li>
<li>Value of LLM if the actual source is the Retrieving data source
<ul>
<li>Seems like the natural language processing part and in summarizing/blending</li>
<li>Can LLM help decipher user query so that the Retriever get more precise information for retrieving information</li>
<li>remember the similarity search result can be 2 or 3 seperate pages of a document, and you dont want the read the whole the pages. the llm will present only the necessary stuff.<a title="https://www.youtube.com/watch?v=T-D1OfcDW1M&amp;t=291s" href="https://www.youtube.com/watch?v=T-D1OfcDW1M&amp;t=291s">[www.youtube.com]</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>General Topics
<ul>
<li>How to use with your own data</li>
<li>How to use with your own tool
<ul>
<li>say run code in response to a query in natural language</li>
</ul>
</li>
</ul>
</li>
<li>How to use with your own data
<ul>
<li><a title="https://deci.ai/blog/fine-tuning-peft-prompt-engineering-and-rag-which-one-is-right-for-you/" href="https://deci.ai/blog/fine-tuning-peft-prompt-engineering-and-rag-which-one-is-right-for-you/">Full Fine-Tuning, PEFT, Prompt Engineering, or RAG?[deci.ai]</a></li>
<li><a title="https://medium.com/@younesh.kc/rag-vs-fine-tuning-in-large-language-models-a-comparison-c765b9e21328" href="https://medium.com/@younesh.kc/rag-vs-fine-tuning-in-large-language-models-a-comparison-c765b9e21328">RAG vs. Fine-Tuning in Large Language Models: A Comparison | by younesh kc | Oct, 2023 | Medium[medium.com]</a></li>
<li><a title="https://www.montecarlodata.com/blog-the-moat-for-enterprise-ai-is-rag-fine-tuning/" href="https://www.montecarlodata.com/blog-the-moat-for-enterprise-ai-is-rag-fine-tuning/">The Moat For Enterprise AI Is RAG + Fine Tuning - Here’s Why[www.montecarlodata.com]</a></li>
</ul>
</li>
<li>Tools
<ul>
<li>Langchain</li>
<li>LlamaIndex</li>
<li>HuggingFace</li>
<li>Ray Serve</li>
</ul>
</li>
<li>open source language models
<ul>
<li>LLAMA 2
<ul>
<li><a title="https://ai.meta.com/llama/" href="https://ai.meta.com/llama/">https://ai.meta.com/llama/</a></li>
</ul>
</li>
<li>GPT4ALL - runs on mac</li>
</ul>
</li>
</ul>
<p><strong>Resources</strong></p>
<ul>
<li><strong>Courses</strong>
<ul>
<li><a title="https://aws.amazon.com/blogs/aws/generative-ai-with-large-language-models-new-hands-on-course-by-deeplearning-ai-and-aws/" href="https://aws.amazon.com/blogs/aws/generative-ai-with-large-language-models-new-hands-on-course-by-deeplearning-ai-and-aws/">Generative AI with Large Language Models — New Hands-on Course by DeepLearning.AI and AWS | AWS News Blog[aws.amazon.com]</a>
<ul>
<li><a title="https://www.deeplearning.ai/courses/generative-ai-with-llms/" href="https://www.deeplearning.ai/courses/generative-ai-with-llms/">Generative AI with LLMs - DeepLearning.AI[www.deeplearning.ai]</a>
<ul>
<li><a title="https://www.coursera.org/learn/generative-ai-with-llms?utm_campaign=WebsiteCoursesGAIA&amp;utm_medium=institutions&amp;utm_source=deeplearning-ai" href="https://www.coursera.org/learn/generative-ai-with-llms?utm_campaign=WebsiteCoursesGAIA&amp;utm_medium=institutions&amp;utm_source=deeplearning-ai">Generative AI with Large Language Models | Coursera[www.coursera.org]</a></li>
</ul>
</li>
<li>By that <a title="https://www.deeplearning.ai/" href="https://www.deeplearning.ai/">DeepLearning.AI</a> (Andrew Ng) and AWS - 16 hours ( 3 weeks - 5hrs/week) - Intermediate Level
<ul>
<li>including scoping the problem, choosing an LLM, adapting the LLM to your domain, optimizing the model for deployment, and integrating into business applications. The course not only focuses on the practical aspects of generative AI but also highlights the science behind LLMs</li>
<li>Describe in detail the transformer architecture that powers LLMs, how they’re trained, and how fine-tuning enables LLMs to be adapted to a variety of specific use cases</li>
</ul>
</li>
</ul>
</li>
<li><a title="https://www.coursera.org/learn/introduction-to-large-language-models" href="https://www.coursera.org/learn/introduction-to-large-language-models">Introduction to Large Language Models | Coursera[www.coursera.org]</a>  - Beginner Level - 1 hour (Instructor: Google Cloud Training)</li>
<li><a title="https://www.cloudskillsboost.google/course_templates/539" href="https://www.cloudskillsboost.google/course_templates/539">Introduction to Large Language Models | Google Cloud Skills Boost[www.cloudskillsboost.google]</a></li>
<li>Princeton
<ul>
<li><a title="https://mediacentral.princeton.edu/media/How+Does+ChatGPT+WorkF+An+Overview+of+Large+Language+Models+%28Part+1+of+3%29/1_d3gex17b" href="https://mediacentral.princeton.edu/media/How+Does+ChatGPT+WorkF+An+Overview+of+Large+Language+Models+%28Part+1+of+3%29/1_d3gex17b">How Does ChatGPT Work? An Overview of Large Language Models (Part 1 of 3) - Princeton University Media Central[mediacentral.princeton.edu]</a></li>
<li><a title="https://mediacentral.princeton.edu/media/How+Does+ChatGPT+WorkF+An+Overview+of+Large+Language+Models+%28Part+2+of+3%29/1_qjpkfuvl" href="https://mediacentral.princeton.edu/media/How+Does+ChatGPT+WorkF+An+Overview+of+Large+Language+Models+%28Part+2+of+3%29/1_qjpkfuvl">How Does ChatGPT Work? An Overview of Large Language Models (Part 2 of 3) - Princeton University Media Central[mediacentral.princeton.edu]</a></li>
<li><a title="https://mediacentral.princeton.edu/media/How+Does+ChatGPT+WorkF+An+Overview+of+Large+Language+Models+%28Part+3+of+3%29/1_tvoyjisq" href="https://mediacentral.princeton.edu/media/How+Does+ChatGPT+WorkF+An+Overview+of+Large+Language+Models+%28Part+3+of+3%29/1_tvoyjisq">How Does ChatGPT Work? An Overview of Large Language Models (Part 3 of 3) - Princeton University Media Central[mediacentral.princeton.edu]</a></li>
</ul>
</li>
<li><a title="https://docs.cohere.com/docs/llmu" href="https://docs.cohere.com/docs/llmu">Welcome to LLM University![docs.cohere.com]</a></li>
<li><a title="https://huggingface.co/learn/nlp-course/chapter1/1?utm_source=www.turingpost.com&amp;utm_medium=referral&amp;utm_campaign=8-free-courses-to-master-large-language-models" href="https://huggingface.co/learn/nlp-course/chapter1/1?utm_source=www.turingpost.com&amp;utm_medium=referral&amp;utm_campaign=8-free-courses-to-master-large-language-models">Introduction - Hugging Face NLP Course[huggingface.co]</a></li>
<li><a title="https://www.deeplearning.ai/short-courses/chatgpt-prompt-engineering-for-developers/" href="https://www.deeplearning.ai/short-courses/chatgpt-prompt-engineering-for-developers/">ChatGPT Prompt Engineering for Developers - DeepLearning.AI[www.deeplearning.ai]</a></li>
<li>Misc
<ul>
<li><a title="https://www.turingpost.com/p/llms-courses" href="https://www.turingpost.com/p/llms-courses">8 Free Courses to Master Large Language Models[www.turingpost.com]</a></li>
<li><a title="https://deepgram.com/learn/foundational-courses-to-learn-large-language-models" href="https://deepgram.com/learn/foundational-courses-to-learn-large-language-models">The 6 Foundational Courses To Learn Large Language Models | Deepgram[deepgram.com]</a></li>
<li><a title="https://www.cs.princeton.edu/courses/archive/fall22/cos597G/" href="https://www.cs.princeton.edu/courses/archive/fall22/cos597G/">COS 597G: Understanding Large Language Models[www.cs.princeton.edu]</a>  (no online videos/enrollment??)</li>
</ul>
</li>
</ul>
</li>
<li><a title="https://cloudonair.withgoogle.com/events/innovation-in-ai-ml-infrastructure-gke-g2-inference" href="https://cloudonair.withgoogle.com/events/innovation-in-ai-ml-infrastructure-gke-g2-inference">Home - Google Cloud AI Infrastructure - Open LLMs on GKE - Llama 2 and Beyond[cloudonair.withgoogle.com]</a></li>
<li><a title="https://github.com/GoogleCloudPlatform/ai-on-gke" href="https://github.com/GoogleCloudPlatform/ai-on-gke">GitHub - GoogleCloudPlatform/ai-on-gke[github.com]</a>
<ul>
<li><a title="https://github.com/GoogleCloudPlatform/ai-on-gke/tree/main/tutorials/serving-llama2-70b-on-l4-gpus" href="https://github.com/GoogleCloudPlatform/ai-on-gke/tree/main/tutorials/serving-llama2-70b-on-l4-gpus">ai-on-gke/tutorials/serving-llama2-70b-on-l4-gpus at main · GoogleCloudPlatform/ai-on-gke · GitHub[github.com]</a></li>
</ul>
</li>
<li><a title="https://cloud.google.com/kubernetes-engine/docs/integrations/ai-infra" href="https://cloud.google.com/kubernetes-engine/docs/integrations/ai-infra">AI/ML orchestration on GKE documentation  |  Google Kubernetes Engine (GKE)  |  Google Cloud[cloud.google.com]</a></li>
<li><a title="https://ai.meta.com/llama/" href="https://ai.meta.com/llama/">Llama 2 - Meta AI[ai.meta.com]</a></li>
<li><a title="https://www.ibm.com/blog/open-source-large-language-models-benefits-risks-and-types/" href="https://www.ibm.com/blog/open-source-large-language-models-benefits-risks-and-types/">Open source large language models: Benefits, risks and types - IBM Blog[www.ibm.com]</a></li>
<li><a title="https://betterprogramming.pub/navigating-the-ai-hype-and-thinking-about-niche-llm-applications-22ea7929b33d" href="https://betterprogramming.pub/navigating-the-ai-hype-and-thinking-about-niche-llm-applications-22ea7929b33d">Navigating the AI Hype and Thinking about Niche LLM Applications | by Hadi Javeed | Better Programming[betterprogramming.pub]</a></li>
<li>Neural Networks to LLM
<ul>
<li><a title="https://aws.amazon.com/compare/the-difference-between-deep-learning-and-neural-networks/" href="https://aws.amazon.com/compare/the-difference-between-deep-learning-and-neural-networks/">Neural Networks vs Deep Learning - Difference Between Artificial Intelligence Fields - AWS[aws.amazon.com]</a></li>
<li><a title="https://www.baeldung.com/cs/rnns-transformers-nlp" href="https://www.baeldung.com/cs/rnns-transformers-nlp">From RNNs to Transformers | Baeldung on Computer Science[www.baeldung.com]</a></li>
<li><a title="https://www.baeldung.com/cs/nlp-encoder-decoder-models" href="https://www.baeldung.com/cs/nlp-encoder-decoder-models">Encoder-Decoder Models for Natural Language Processing | Baeldung on Computer Science[www.baeldung.com]</a></li>
</ul>
</li>
<li>General
<ul>
<li><a title="https://developers.google.com/machine-learning/resources" href="https://developers.google.com/machine-learning/resources">Machine Learning | Resources  |  Google for Developers[developers.google.com]</a>
<ul>
<li><a title="https://developers.google.com/machine-learning/resources/intro-llms" href="https://developers.google.com/machine-learning/resources/intro-llms">Introduction to Large Language Models  |  Machine Learning  |  Google for Developers[developers.google.com]</a></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
        </item>
    </channel>
</rss>